################################################################################
#
# Bayesian model averaging using reversible-jump MCMC over
#            Mk and SHDM models using morphological character data.
#
################################################################################
####################
# Read in the data #
####################
this_gene = "AntMegaMatrixMinusAmbig"
data = readDiscreteCharacterData("data/" + this_gene + ".nex")

#get some useful information about the data
taxa = data.taxa()
num_taxa = data.ntaxa()
num_branches = 2 * num_taxa - 3

# Create some vector for the moves and monitors of this analysis
moves    = VectorMoves()
monitors = VectorMonitors()

# name the analysis
name = this_gene + "_" + "RJ"

# Set up branch length moves
br_len_lambda ~ dnExp(0.2)
moves.append(mvScale(br_len_lambda, weight=5))

nbr <- 2*taxa.size() - 3
for (i in 1:nbr){
    br_lens[i] ~ dnExponential(br_len_lambda)
    moves.append(mvScale(br_lens[i]))
}

# Create a starting tree and place moves.append on it.
tau ~ dnUniformTopology(taxa)
phylogeny := treeAssembly(tau, br_lens)
moves.append(mvNNI(tau, weight=2*nbr))
moves.append(mvSPR(tau, weight=nbr))
tree_length := phylogeny.treeLength()

model_indicator ~ dnCategorical(simplex(1,1))
moves.append(mvRandomGeometricWalk(model_indicator, weight=10.0, tune=FALSE))

#################################################
# Define the model of among-site rate variation #
#################################################

alpha ~ dnReversibleJumpMixture(1E8, dnUniform(0,1E8), 0.5)
moves.append(mvRJSwitch(alpha, weight=10.0))
moves.append(mvScale(alpha, weight=10.0))

alpha_indicator := ifelse(alpha == 1E8, 0, 1)

site_rates := fnDiscretizeGamma(alpha, alpha, 4)
###########################################
###########################################
#SHDM Model
n_cats = 3
n_max_states <- 7
idx = 1
# Draw the concentration parameter of the Dirichlet distribution of equilibrium state frequencies from an exponential hyperprior, and place a move on it.
dir_alpha ~ dnExponential( 1.0 )
moves.append(mvScale(dir_alpha, lambda=1, weight=1.0))
moves.append(mvScale(dir_alpha, lambda=0.1, weight=3.0))
moves.append(mvScale(dir_alpha, lambda=0.01, weight=5.0))

for (i in 2:n_max_states) {
    morpho_bystate[i - 1] <- data
    morpho_bystate[i - 1].setNumStatesPartition(i)
    nc = morpho_bystate[i - 1].nchar()
    if (nc > 0) {
        #Place a symmetric Dirichlet prior on the equilibrium state frequencies
        pi_prior[idx] := rep(dir_alpha, i)

        for (j in 1:n_cats) {
            # Draw a vector of equilibrium state frequencies from the specified prior
            pi[idx][j] ~ dnDirichlet(pi_prior[idx])
            moves.append(mvSimplexElementScale(pi[idx][j], alpha=10, weight=1.0))
            # Reverse the pi[idx][j] vector
            upper = pi[idx][j].size()
            for (k in 1:upper) {
                ind = upper + 1 - k
                rev_pi[idx][j][k] <- pi[idx][j][ind]
            }
            # Create i-by-i rate matrices from both the original and reversed state
            # frequency vectors.
            Q_SHDM[idx][2*j - 1] := fnF81(pi[idx][j])
            # Need to apply simplex() to convert rev_pi[idx][j] from type Probability[]
            Q_SHDM[idx][2*j] := fnF81(simplex(rev_pi[idx][j]))
        }
        print("The mixture contains "+Q_SHDM[idx].size()+" rate matrices:")
        for (l in 1:Q_SHDM[idx].size()) {
            print(" ")
            Q_SHDM[idx][l]
        }
        #Tell the model what the probability of a character going into any particular category of the rate matrix mixture. The flat Dirichlet prior used here says that a character is equally likely to be put into any category.
        mat_prior[idx] <- rep(1, 2*n_cats)
        matrix_probs[idx] ~ dnDirichlet(mat_prior[idx])

        # Place move on the category assignment probabilities
        moves.append(mvBetaSimplex(matrix_probs[idx], weight=3.0))
        moves.append(mvDirichletSimplex(matrix_probs[idx], weight=1.5))

        # Combine all of our elements into a CTMC. Because we have not observed any invariant sites, we specify the coding as 'variable'. Note that we are now feeding the site matrices to the CTMC.
        #m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny, siteRates=rates_morpho, Q=Q_SHDM[idx], type="Standard", siteMatrices=matrix_probs[idx])
        # Clamp to the data
        #m_morph[idx].clamp(morpho_bystate[i - 1])
        idx = idx + 1
    }
}
###########################################
#Mk Model
###########################################
n_max_states <- 7
idx = 1
n_cats = 3

morpho_bystate[1] <- data
for (i in 2:n_max_states) {
    #make local tmp copy of data
    morpho_bystate[i] <- data
    #only keep character blocks with state space equal to size i
    morpho_bystate[i].setNumStatesPartition(i)
    #get number of characters per character size with i-sized states
    nc = morpho_bystate[i].nchar()
    if (nc > 0) {
          for (j in 1:n_cats) {

        #for non-empty character blocks make i-by-i rate matrix
          Q_Mk[idx][2*j - 1] := fnJC(i)
          # need to apply simplex() to convert rev_pi[idx][j] from type Probability[]
          Q_Mk[idx][2*j] := fnJC(i)
        print("The mixture contains "+Q_Mk[idx].size()+" rate matrices:")
        for (l in 1:Q_Mk[idx].size()) {
            print(" ")
            Q_Mk[idx][l]
        }
        }

                mat_prior[idx] <- rep(1, 2*n_cats)
                matrix_probs[idx] ~ dnDirichlet(mat_prior[idx])

                # Place move on the category assignment probabilities
                moves.append(mvBetaSimplex(matrix_probs[idx], weight=3.0))
                moves.append(mvDirichletSimplex(matrix_probs[idx], weight=1.5))
        #create model of evolution for the character block
        #m_morph[idx] ~ dnPhyloCTMC(tree=phylogeny, Q=Q_Mk[idx], nSites=nc, siteRates=rates_morpho, type="Standard")
        # attach the data
        #m_morph[idx].clamp(morpho_bystate[i])
        idx = idx + 1
        idx
    }
}
###########################################
###########################################


#################################
# Define the phyloCTMC model    #
# (AKA the likelihood function) #
#################################
idx = 1
model_indicator ~ dnCategorical(simplex(1,1))
moves.append( mvRandomGeometricWalk(model_indicator, weight=10.0, tune=FALSE) )

n_max_states <- 7
for (i in 2:n_max_states) {
    morpho_bystate[i] <- data
    morpho_bystate[i].setNumStatesPartition(i)
    Q_vec[idx] := v(Q_Mk[idx], Q_SHDM[idx])
    Q[idx] := Q_vec[idx][model_indicator]
    seq[idx] ~ dnPhyloCTMC(tree=phylogeny, Q=Q[idx], type="Standard", siteRates=site_rates, siteMatrices = matrix_probs[idx])
    seq[idx].clamp(morpho_bystate[i]) # attach the observed data
    idx = idx + 1
    idx
    print(i)
}

#########################
# Make the model object #
#########################
my_model = model(phylogeny)

#####################
# Make the monitors #
#####################

monitors.append(mnModel(filename="output/" + name + "/posterior_samples.log",printgen=10, separator = TAB))
monitors.append(mnFile(filename="output/" + name + "/tree_samples.trees",printgen=10, separator = TAB, phylogeny))
monitors.append(mnScreen(printgen=1000, model_indicator, alpha_indicator))

################
# Run the MCMC #
################

mymcmc = mcmc(my_model, moves, monitors, nruns=2, combine="mixed")
mymcmc.run(generations=20000,tuningInterval=200)

#########################################
# Read in the posterior sample of trees #
# and compute the MAP tree              #
#########################################

# start by reading in the tree trace
#treetrace = readTreeTrace("output/" + name + "/tree_samples.trees")
#map_tree = mapTree(treetrace,"output/" + name + "/MAP_tree.tree")

# exit the program
q()
